# ========================= #
# DATABASE CONNECTION SETUP #
# ========================= #
# The URL to your database
spring.datasource.url=jdbc:postgresql://ec2-54-217-243-160.eu-west-1.compute.amazonaws.com:5432/ddmgmmrt42cjo2

# User name and Password to your database
spring.datasource.username=slkltcpwspxipp
spring.datasource.password=797ebcd879cdcf965edc7cca0ef58ada93470a2c849e0481d770194445e49ea1

# til að sjá hvaða villur maður fær
# spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
logging.level.org.hibernate.SQL=DEBUG

# What Driver to use
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jackson.serialization.fail-on-empty-beans=false

# ============================= #
# DATA JPA - HIBERNATE SETTINGS #
# ============================= #

# To offload the responsibility to create the database tables for our
# entities to the DATA JPA system, we can use the following configuration
spring.jpa.hibernate.ddl-auto=update

# There are 5 possible values we can give this configuration, see below for what each one does
# update      -> update the schema
# create      -> creates the schema, destroying previous data
# create-drop -> creates the schema, drop the schema at the end of the session
# none        -> do nothing
# validate    -> Validate the schema, makes no changes to the database

# NOTE:
# Sometimes in development when rapid changes are made on entities, the database
# tables can become a bit wonky, e.g. you add attributes to entities, change
# data type (e.g. int to Long), etc. If you are having some weird problems you can
# try and set this option to `create` and run the system to force a drop of the schema
# and creation of the schema as it should be.
# ALL THE DATA IN THE DATABASE WILL BE LOST. BACK IT UP IF YOU NEED IT!
# Just remember to revert the option back to `update` or `none` if you want any
# data to be persistent after that.

# Log SQL Statements
#spring.jpa.show-sql=true
